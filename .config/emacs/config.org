#+TITLE: Mer Thich's Emacs Configuration
#+AUTHOR: Mer Thich (programming-programmer)

 * Very evil things follow. Beware! 👻

* Preface
 * This is copied from what_it_was.txt
   * Make sure init.el's path to config.org is there
   * use-package making sure is installed doesn't work either so install before

   * If there is an error with org, start emacs with "emacs -q" and install org
     9.x. Then reload emacs

   * Install Noto Color Emoji or another emoji font to use emojis in Emacs
   * Also! Install Source Code Pro

* Garbage Collection
 * Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time. The default is 800 kilobytes. Measured in bytes. Garbage collection off during initialization (focus all memory on initialize)
#+begin_src emacs-lisp
    (setq gc-cons-threshold (* 50 1000 1000) 
          gc-cons-percentage 0.6)
#+end_src

 * Reset garbage collection after initialization (return deprecated memory to stack when idle)
#+begin_src emacs-lisp
    (add-hook 'emacs-startup-hook
              (lambda ()
                (setq gc-cons-threshold 16777216 ; 16mb
                      gc-cons-percentage 0.1)))

    (setq gcmh-idle-delay 'auto  ; default is 15s
          gcmh-auto-idle-delay-factor 10
          gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
#+end_src

* Package Management
** Package Sources 
 * Where to gather package sources (MELPA and MELPA stable, and ELPA)
#+begin_src emacs-lisp
    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("melpa-stable" . "https://stable.melpa.org/packages/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

** Use-package
 * Use use-package for easier and more concise package management. yay!
#+begin_src emacs-lisp
    (require 'use-package)
    (setq use-package-always-ensure t)
#+end_src

* Startup and Perfomance
** Start Server
 * This does something but if the "original" emacs session closes the server
   stops. So either workaround this somehow or do something with a script.

 * EmacsWiki is helpful

#+begin_src emacs-lisp
(server-start)
#+end_src

** Defaults in Emacs
#+begin_src emacs-lisp
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   inhibit-splash-screen t                          ; No splash screen
   sentence-end-double-space nil                    ; Double space after a period!? Inhumane!
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   initial-scratch-message "(✦ ‿ ✦)\n\n\n"              ; Remove pesky scratch message
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode t                               ; Prefer tabs over inferior spaces
   inhibit-startup-screen t                         ; Disable start-up screen
   load-prefer-newer t                              ; Prefer the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                                ; Always open read only files in view mode


  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show parent paranthesis
  (global-visual-line-mode nil)                     ; Turn off that silly visual line mode
  (savehist-mode t)                                 ; Save history
  (menu-bar-mode -1)                                ; Remove that menubar pls :)
  (tool-bar-mode -1)                                ; Remove toolbar too
  (scroll-bar-mode -1)                              ; Disable visible scrollbar
  (tooltip-mode -1)                                 ; Disable tooltips
  (set-fringe-mode 10)                              ; Give some breathing room  
#+end_src

** Scrolling improvements
#+begin_src emacs-lisp
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; one line at a time
    (setq mouse-wheel-progressive-speed nil)            ; don't accelerate scrolling
    (setq mouse-wheel-follow-mouse 't)                  ; scroll window under mouse
    (setq scroll-step 1)                                ; keyboard scroll one line at a time
#+end_src

** No Line Numbers
 * No line numbers for org-mode, programming-mode, text-mode, and conf-mode??
   But they do get toggled heh
#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook
                  prog-mode-hook
                  text-mode
                  conf-mode))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
 
** Backups/Lockfiles
#+begin_src emacs-lisp
(setq create-lockfiles nil
      make-backup-files nil
      ;; But in case the user does enable it, some sensible defaults:
      version-control t     ; number each backup file
      backup-by-copying t   ; instead of renaming current file (clobbers links)
      delete-old-versions t ; clean up after itself
      kept-old-versions 5
      kept-new-versions 5
      backup-directory-alist (list (cons "." (concat user-emacs-directory "backup/"))))
#+end_src

** Maximization on startup baby!
 * Having Fullscreen on startup is a pain with the ugly bar and it would be a
   pain in tiling window managers. But it's *also* toggleable
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
#+end_src

** Remove window decorations
#+begin_src emacs-lisp
(setq default-frame-alist '((undecorated . t))) 
#+end_src

** Transparency??
 * I realized this if for Emacs 29+ which is not on my system. I'll wait for
   later :(
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+end_src

** Load Custom Lisp Files
#+begin_src emacs-lisp
(load "/home/mthich/.config/emacs/lisp/funcs.el")
(load "/home/mthich/.config/emacs/lisp/var.el")
(load "/home/mthich/.config/emacs/lisp/plain-dark.el")
#+end_src

** Use System Trash
 * There has been too many times I've had a near heart attack from deleting.
   Google Drive was there to prevent to much loss. However, in a move towards no
   google™ we must *not* rely on such things
   #+begin_src emacs-lisp
(setq trash-directory (concat mt/home ".Trash"))
(setq delete-by-moving-to-trash t)
   #+end_src

* Addons
** Which-key
 * Shows which keys are avaliable. HAH! look at that pun. amazing
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Nyan Mode 
 * Nyan mode baby! 
#+begin_src emacs-lisp
  (use-package nyan-mode 
    :init (nyan-mode) 
    :config (setq nyan-wavy-trail nil))
#+end_src

** Emojis

 * Shamelessly stolen from this [[https://ianyepan.github.io/posts/emacs-emojis/][blog]]. Install Noto Color Emoji beforehand though 😔
  
#+begin_src emacs-lisp
  (use-package emojify
    :config
    (when (member "Noto Color Emoji" (font-family-list))
      (set-fontset-font
       t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
    (setq emojify-display-style 'unicode)
    (setq emojify-emoji-styles '(unicode))
    (bind-key* (kbd "C-c e") #'emojify-insert-emoji)) ; override binding in any mode
#+end_src

** Modeline
*** Hide Modeline
 * Honestly, this is a blessing. Hide the modeline. This is mapped to a
   keybinding (evil mode of course 👻)
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :commands (hide-mode-line-mode))
#+end_src

*** DOOM Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-mode)
    (setq doom-modeline-enable-word-count nil
          doom-modeline-buffer-encoding nil
          doom-modeline-project-detection 'file-name
          doom-modeline-highlight-modified-buffer-name t

          ;; Icons ---
          doom-modeline-modal nil
          doom-modeline-icon nil
          doom-modeline-modal-icon nil
          doom-modeline-major-mode-icon nil
          doom-modeline-major-mode-color-icon nil
          doom-modeline-buffer-modification-icon nil
          doom-modeline-buffer-state-icon t
          doom-modeline-unicode-fallback nil
          doom-modeline-bar-width 3))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil) ;; load Evil keybindings in other modes
    (setq evil-want-fine-undo t)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-mode-line-format nil)
    (setq evil-disable-insert-state-bindings t)
    :config

    ;; ----- Keybindings
    (define-key evil-motion-state-map "/" 'swiper)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)

    (setq evil-emacs-state-cursor    '("#649bce" box))
    (setq evil-normal-state-cursor   '("#d9a871" box))
    (setq evil-operator-state-cursor '("#ebcb8b" hollow))
    (setq evil-visual-state-cursor   '("#677691" box))
    (setq evil-insert-state-cursor   '("#eb998b" (bar . 2)))
    (setq evil-replace-state-cursor  '("#eb998b" hbar))
    (setq evil-motion-state-cursor   '("#ad8beb" box))

    ;; ----- Redo Functionality
    (evil-set-undo-system 'undo-tree)
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src

*** Undo/Redo Functionality (with undo-tree)

#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode 1))
#+end_src

* Aesthetics
** Font: Source Code Pro
 * NOTE: On a new system, you will have to install Source Code Pro on the system
#+begin_src emacs-lisp
  (set-face-attribute 'default t :height 100 :weight 'medium)
  (set-face-attribute 'default t :font "Source Code Pro")
#+end_src

 * Font for org-mode
#+begin_src emacs-lisp
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Code Pro" :height 100 :weight medium))))
   '(fixed-pitch ((t ( :family "Source Code Pro" :height 100)))))
#+end_src 

** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-ayu-dark t))
#+end_src

** Writeroom env
 * I removed the writeroom since it wasn't necessary. I guess I'll keep this one
   though. SIKE!!
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :defer t
    :config
    (setq visual-fill-column-center-text t)
    (setq visual-fill-column-width 80)
    (setq visual-fill-column-center-text t))

  (use-package writeroom-mode
    :defer t
    :config
    (setq writeroom-maximize-window nil
          writeroom-mode-line nil
          writeroom-global-effects nil ;; No need to have Writeroom do any of that silly stuff
          writeroom-extra-line-spacing 3) 
    (setq writeroom-width visual-fill-column-width)
    )
#+end_src

* Keybindings
 * All of this thanks to general.el 🎉🎉🎉🎉🎉 YAYAYAY!!
#+begin_src emacs-lisp
(use-package general)
#+end_src

** SPC Leader Key
#+begin_src emacs-lisp
  (general-define-key
   :states '(normal motion visual)
   :keymaps 'override
   :prefix "SPC"
#+end_src

*** Top level functions
#+begin_src emacs-lisp
  "f" '(counsel-find-file :which-key "find file")
  "r" '(counsel-recentf :which-key "recent files")
  "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
  "SPC" '(counsel-M-x :which-key "M-x")
  "B" '(counsel-switch-buffer :which-key "switch buffers")
  "C-c" '(save-buffers-kill-terminal :which-key "quit emacs")
  "c" '(org-capture :which-key "org-capture")
  "u" '(universal-argument :which-key "universal-argument")
  "z" '(repeat :which-key "repeat")
  "C-d" '(dired-jump :which-key "dired jump")
  "C-b" '(counsel-bookmark :which-key "bookmarks")
  "C-o" '(org-agenda :which-key "org agenda")
#+end_src

*** Applications
#+begin_src emacs-lisp
;; "Applications"
"a" '(nil :which-key "applications")
"ao" '(org-agenda :which-key "org-agenda")
;; "am" '(mu4e :which-key "mu4e") ; I wanna get this setup up so bad >.<
;; "aC" '(calc :which-key "calc")

"ad" '(dired :which-key "dired")
"a C-d" '(dired-jump :which-key "dired jump")
#+end_src

*** Buffers
#+begin_src emacs-lisp
"b" '(nil :which-key "buffer")
"bb" '(counsel-switch-buffer :which-key "switch buffers")
"bd" '(evil-delete-buffer :which-key "delete buffer")
#+end_src

*** Files
#+begin_src emacs-lisp
;; Files
"f" '(nil :which-key "files")
"fb" '(counsel-bookmark :which-key "bookmarks")
"ff" '(counsel-find-file :which-key "find file")
"fr" '(counsel-recentf :which-key "recent files")
"fR" '(rename-file :which-key "rename file")
"fs" '(save-buffer :which-key "save buffer")
"fS" '(evil-write-all :which-key "save all buffers")
#+end_src

*** Help/Emacs
#+begin_src emacs-lisp
;; Help/emacs
"h" '(nil :which-key "help/emacs")

"hv" '(counsel-describe-variable :which-key "des. variable")
"hb" '(counsel-descbinds :which-key "des. bindings")
"hM" '(describe-mode :which-key "des. mode")
"hf" '(counsel-describe-function :which-key "des. func")
"hF" '(counsel-describe-face :which-key "des. face")
"hk" '(describe-key :which-key "des. key")

"hm" '(nil :which-key "switch mode")
"hme" '(emacs-lisp-mode :which-key "elisp mode")
"hmo" '(org-mode :which-key "org mode")
"hmt" '(text-mode :which-key "text mode")

"hp" '(nil :which-key "packages")
"hpr" 'package-refresh-contents
"hpi" 'package-install
"hpd" 'package-delete
#+end_src

*** Toggles/Visuals
#+begin_src emacs-lisp
  ;; Toggles
  "t" '(nil :which-key "toggles")
  "tt" '(toggle-truncate-lines :which-key "truncate lines")
  "tv" '(visual-line-mode :which-key "visual line mode")
  "tn" '(display-line-numbers-mode :which-key "display line numbers")
  "tR" '(read-only-mode :which-key "read only mode")
  "tw" '(writeroom-mode :which-key "writeroom mode")
  "tm" '(hide-mode-line-mode :which-key "hide modeline mode")
  "tM" '(toggle-frame-maximized :which-key "toggle maximized")
  "tF" '(toggle-frame-fullscreen :which-key "toggle fullscreen")
#+end_src

*** Windows
#+begin_src emacs-lisp
  "w" '(nil :which-key "window")
  "wm" '(jib/toggle-maximize-buffer :which-key "maximize buffer")
  "wN" '(make-frame :which-key "make frame")
  "wd" '(evil-window-delete :which-key "delete window")
  "wD" '(delete-other-windows :which-key "delete other windows")
  "w-" '(jib/split-window-vertically-and-switch :which-key "split below")
  "w/" '(jib/split-window-horizontally-and-switch :which-key "split right")
  "w{" '(enlarge-window-horizontally :which-key "expand horizon")
  "w}" '(shrink-window-horizontally :which-key "shrink horizon")
  "w+" '(balance-windows :which-key "balance windows")
  "w^" '(enlarge-window :which-key "enlarge verizon")
  "wl" '(evil-window-right :which-key "evil-window-right")
  "wh" '(evil-window-left :which-key "evil-window-left")
  "wj" '(evil-window-down :which-key "evil-window-down")
  "wk" '(evil-window-up :which-key "evil-window-up")
  "wz" '(text-scale-adjust :which-key "text zoom")
#+end_src

*** End SPC prefix block
#+begin_src emacs-lisp
)
#+end_src

** All-mode keybindings
#+begin_src emacs-lisp
  (general-def
    :keymaps 'override
    )
#+end_src

** Insert Mode Keymaps
#+begin_src emacs-lisp
  ;; Insert keymaps
  (general-def
    :states '(insert)
    "C-g" 'evil-normal-state

    ;; Emacs ---
    "C-x C-m" 'counsel-M-x

    ;; Utility ---
    "C-c c" 'org-capture
    "C-c a" 'org-agenda
    "C-s" 'swiper

    "<tab>" 'tempo-complete-tag
    "TAB" 'tempo-complete-tag
    )
#+end_src


** Normal Mode Keymaps
#+begin_src emacs-lisp
  ;; Insert keymaps
  (general-def
    :states '(normal)
    "$" 'evil-end-of-visual-line
    "0" 'evil-beginning-of-visual-line
    )
#+end_src

** Duplicate line: C-c d
#+begin_src emacs-lisp
    (defun duplicate-line()
      (interactive)
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (open-line 1)
      (next-line 1)
      (yank))

  (global-set-key (kbd "C-c d") 'duplicate-line)
#+end_src

** Rebind M-x
#+begin_src emacs-lisp
 (global-set-key "\C-x\C-m" 'execute-extended-command)
#+end_src

* Ivy
 * Ivy is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs. 
#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :config
    (setq ivy-extra-directories nil) ;; Hides . and .. directories
    (setq ivy-initial-inputs-alist nil) ;; Removes the ^ in ivy searches
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :general
    (general-define-key
     ;; Also put in ivy-switch-buffer-map b/c otherwise switch buffer map overrides and C-k kills buffers
     :keymaps '(ivy-minibuffer-map ivy-switch-buffer-map)
     "S-SPC" 'nil
     "C-SPC" 'ivy-restrict-to-matches ;; Default is S-SPC, changed this b/c sometimes I accidentally hit S-SPC
     ;; C-j and C-k to move up/down in Ivy
     ;; I'm not sure if this is redundant but it's whatever
     "C-k" 'ivy-previous-line
     "C-j" 'ivy-next-line)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    (ivy-mode 1)
    )  

#+end_src

** Ivy Rich
 * ivy-rich adds extra columns to a few of the Counsel commands to provide more information about each item.
 #+begin_src emacs-lisp
   (use-package ivy-rich
    :init
    (setq ivy-rich-path-style 'abbrev)
    (ivy-rich-mode 1))
 #+end_src

** Counsel
 * Counsel is a customized set of commands to replace `find-file` with
   `counsel-find-file`, etc which provide useful commands for each of the default completion commands.
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("C-x b" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))
#+end_src

* Org-Mode
** Org mode setup 
 * Turn on indentation and auto-fill mode for Org files
#+begin_src emacs-lisp
  (defun dw/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode)) 
#+end_src

 * This is another preamble :)
#+begin_src emacs-lisp
    (use-package org
       :defer t
       :hook (org-mode . dw/org-mode-setup)
#+end_src

** Org Config 
#+begin_src emacs-lisp
  :config
  (setq
#+end_src

*** Org Ellipsis
#+begin_src emacs-lisp
  org-ellipsis " ▾"
#+end_src

*** Org Keywords and Faces
 * I know it sounds silly but the little "|" is acutally really important. It
   seperates todo from done (or cancelled would be the *only* done state)
 * So after nearly pulling my hair out, I read thru the manual and discovered
   that little fact
 * It solved the agenda problem immediately 😐
 * I was dissapointed in past me but atleast it's solved :)
#+begin_src emacs-lisp
  ;; Keywords
  org-todo-keywords
  '((sequence "TODO" "PROG" "|" "DONE" "WAITING" "CANCELLED"))

  ;; Faces
  org-todo-keyword-faces
  '(("PROG" . (:foreground "dark red" :weight bold))
    ("DONE" . (:foreground "gray" :weight bold))
    ("WAITING" . (:foreground "dark slate gray" :weight bold))
    ("CANCELLED" . (:foreground "dark gray" :weight bold)))         
  #+end_src

*** Other Defaults
  #+begin_src emacs-lisp
    ;; Source Fontify
    org-src-fontify-natively t
    ;; Quote and Verse Blocks
    org-fontify-quote-and-verse-blocks t
    ;; Org Tab Behaviors
    org-src-tab-acts-natively t
    ;; Source Code indentation
    org-edit-src-content-indentation 2
    ;; Block Startup
    org-hide-block-startup nil
    ;; Org Indentation
    org-src-preserve-indentation nil
    ;; Folded Org Headers
    org-startup-folded 'content
    ;; Seperator Lines
    org-cycle-separator-lines 2
    ;; Inline Images
    org-startup-with-inline-images t
    ;; Emphasis Markers
    org-hide-emphasis-markers t

    ;; Org Agenda Column View
    org-agenda-overriding-columns-format
    "%TODO %ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM" 

    org-global-properties
    (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")))

    ;; CLOCKING-----
    ;; Show only timer from current clock session in modeline
    org-clock-mode-line-total 'current
    org-clock-clocked-in-display 'both
    ;; Clock out when moving task to a done state
    org-clock-out-when-done t
    ;; Change tasks to NEXT when clocking in
    org-clock-in-switch-to-state "PROG"
#+end_src

**** End of Org Defualt Block
#+begin_src emacs-lisp
)
#+end_src

**** Change clock to RED when running overtime
#+begin_src emacs-lisp
  (custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(org-mode-line-clock ((t (:foreground "red" :box (:line-width -1 :style released-button)))) t))
#+end_src

*** Evil Org
#+begin_src emacs-lisp
(use-package evil-org
  :diminish evil-org-mode
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme))))

(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+end_src

** Org mode Keybindings
#+begin_src emacs-lisp
  (general-define-key
   :prefix ","
   :states 'motion
   :keymaps '(org-mode-map)
   "" nil
   "A" '(org-archive-subtree-default :which-key "org-archive")
   "a" '(org-agenda :which-key "org agenda")
   "6" '(org-sort :which-key "sort")
   "c" '(org-capture :which-key "org-capture")
   "s" '(org-schedule :which-key "schedule")
   "S" '(jib/org-schedule-tomorrow :which-key "schedule tmrw")
   "d" '(org-deadline :which-key "deadline")
   "g" '(counsel-org-goto :which-key "goto heading")
   ":" '(counsel-org-tag :which-key "set tags")
   "p" '(org-set-property :which-key "set property")
   "," '(org-todo :which-key "toggle TODO state")
   "C" '(org-toggle-checkbox :which-key "toggle checkbox")
   "E" '(org-export-dispatch :which-key "export org")
   "e" '(org-set-effort :which-key "set effort")
   "." '(org-toggle-narrow-to-subtree :which-key "toggle narrow to subtree")

   "1" '(org-toggle-link-display :which-key "toggle link display")
   "2" '(org-toggle-inline-images :which-key "toggle images")

   ;; insert
   "i" '(nil :which-key "insert")

   "il" '(org-insert-link :which-key "org-insert-link")
   "iL" '(counsel-org-link :which-key "counsel-org-link")
   "ic" '(insert-char :which-key "insert character")

   "is" '(nil :which-key "insert stamp")
   "iss" '((lambda () (interactive) (call-interactively (org-time-stamp-inactive))) :which-key "org-time-stamp-inactive")
   "isS" '((lambda () (interactive) (call-interactively (org-time-stamp nil))) :which-key "org-time-stamp")

   ;; clocking
   "c" '(nil :which-key "clocking")
   "ci" '(org-clock-in :which-key "clock in")
   "co" '(org-clock-out :which-key "clock out")
   "cj" '(org-clock-goto :which-key "jump to clock")
   )
#+end_src

** Org Capture Templates
#+begin_src emacs-lisp
  ;; Removes that annoying bookmark for most recent bookmark (hopefully)
  (setq org-bookmark-names-plist nil)

  (setq org-capture-templates '(
#+end_src

*** Task Template
#+begin_src emacs-lisp
   ("t" "Todo" entry (file+headline "/home/mthich/.config/emacs/org/refile.org"  "Tasks")
    "* TODO  %?\n ")
#+end_src

*** Notes Template
#+begin_src emacs-lisp
   ("n" "Notes" entry (file+headline "/home/mthich/.config/emacs/org/refile.org" "Notes")
  "* %?  \n ")
#+end_src

*** End of Org Capture Templates
#+begin_src emacs-lisp
   ))
#+end_src

** Org Refile Targets
#+begin_src emacs-lisp
; Targets include this file and any file contributing to the agenda - up to 2 levels deep
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 2))))

; Use full outline paths for refile targets
(setq org-refile-use-outline-path nil)
#+end_src

** Org-indent Face
 * Make sure org-indent face is avaliable
 * Makes it so that the headers indent
#+begin_src emacs-lisp
    (require 'org-indent)
#+end_src

** Pretty Header Bullet Points
 * Nice header bullet points
#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode)
      :custom
      (org-superstar-remove-leading-stars t)
      (org-superstar-headline-bullets-list '("◈" "○" "◉" "○" "◆" "○")))
#+end_src

** Header Sizes
#+begin_src emacs-lisp
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
     )
#+end_src

** Code block templates
 * Type "<el" then hit Tab to expand template. This is needed as of Org 9.2
#+begin_src emacs-lisp
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

** Pretty Symbols
#+begin_src emacs-lisp
  ;; Prettifying src blocks
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "†")
                                         ("#+END_SRC" . "†")
                                         ("#+begin_src" . "†")
                                         ("#+end_src" . "†")
                                         (">=" . "≥")
                                         ("=>" . "⇨")))

  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (add-hook 'org-mode-hook 'prettify-symbols-mode)
#+end_src

** End of Org Block
#+begin_src emacs-lisp   
 )
#+end_src

* Org Agenda
** Some sane defaults
#+begin_src emacs-lisp
  ;; Only show upcoming deadlines for the next X days. By default it shows
  ;; 14 days into the future, which seems excessive.
  (setq org-deadline-warning-days 3)
  ;; If something is done, don't show its deadline
  (setq org-agenda-skip-deadline-if-done t)
  ;; If something is done, don't show when it's scheduled for
  (setq org-agenda-skip-scheduled-if-done t)
  ;; If something is scheduled, don't tell me it is due soon
  (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
  ;; use AM-PM and not 24-hour time
  (setq org-agenda-timegrid-use-ampm t)
  (setq org-agenda-block-separator ?-)

#+end_src

** Custom Agenda Views
 * I would like to remove the "DONE" keyword but it's whatever. I DID IT!! WAHOOOTTOTOTO!!
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        `(("d" "Agenda™"
           ((tags-todo "*"
                       ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                        (org-agenda-skip-function
                         `(org-agenda-skip-entry-if
                           'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
                        (org-agenda-block-separator nil)
                        (org-agenda-overriding-header "Tasks without a date (Refile)")))

            (agenda "" ((org-agenda-span 1)
                        (org-deadline-warning-days 0)
                        (org-agenda-block-separator nil)
                        (org-scheduled-past-days 0)
                        (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                        (org-agenda-format-date "%A %-e %B %Y")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                        (org-agenda-overriding-header "\nToday's agenda")))

            (agenda "" ((org-agenda-start-on-weekday nil)
                        (org-agenda-start-day "+1d")
                        (org-agenda-span 3)
                        (org-deadline-warning-days 0)
                        (org-agenda-block-separator nil)
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                        (org-agenda-overriding-header "\nNext three days")))

            (agenda "" ((org-agenda-time-grid nil)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-start-day "+4d")
                        (org-agenda-span 14)
                        (org-agenda-show-all-dates nil)
                        (org-deadline-warning-days 0)
                        (org-agenda-block-separator nil)
                        (org-agenda-entry-types '(:deadline))
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                        (org-agenda-overriding-header "\nUpcoming deadlines (+14d)")))

            ))

          ("D" "Daily agenda"
           ((agenda "" ((org-agenda-span 1)
                        (org-deadline-warning-days 0)
                        (org-agenda-block-separator nil)
                        (org-scheduled-past-days 0)
                        (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                        (org-agenda-format-date "%A %-e %B %Y")
                        (org-agenda-overriding-header "Today's agenda")))

            ))
          ))
#+end_src

** Highlight current line
#+begin_src emacs-lisp
;; Always hilight the current agenda line
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)
#+end_src

** Org Agenda Keybindings
#+begin_src emacs-lisp
(general-define-key
 :prefix ","
 :states 'motion
 :keymaps '(org-agenda-mode-map)
 "" nil
 "a" '(org-agenda :which-key "org agenda")
 "c" '(org-capture :which-key "org-capture")
 "d" '(org-agenda-deadline :which-key "deadline")
 "s" '(org-agenda-schedule :which-key "schedule") 
 "," '(org-agenda-deadline :which-key "deadline") ;; quick access
 "t" '(org-agenda-set-tags :which-key "set tags")
 ;; clocking
 "c" '(nil :which-key "clocking")
 "ci" '(org-agenda-clock-in :which-key "clock in")
 "co" '(org-agenda-clock-out :which-key "clock out")
 "cj" '(org-clock-goto :which-key "jump to clock")
 )

(evil-define-key 'motion org-agenda-mode-map
  (kbd "f") 'org-agenda-later
  (kbd "b") 'org-agenda-earlier)
#+end_src

* Org-Roam

#+begin_src emacs-lisp
  (use-package org-roam
#+end_src

** Org Roam Directory
#+begin_src emacs-lisp  
    :custom
    (org-roam-directory (concat mt/roam))
#+end_src

** Org Roam Completion
#+begin_src emacs-lisp
    (org-roam-completion-everywhere t)
    #+end_src

** Org Roam Capture Template
#+begin_src emacs-lisp
   (org-roam-capture-templates '(
#+end_src

*** Default Template
#+begin_src emacs-lisp
  ("d" "default" plain
   "%?"
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
   :unnarrowed t)
#+end_src

*** Class Template
#+begin_src emacs-lisp
  ("c" "class" plain (file "/home/mthich/.config/emacs/org/class_template.org")
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
   :unnarrowed t)
#+end_src

*** School Note Template
#+begin_src emacs-lisp
  ("s" "school note" plain (file "/home/mthich/.config/emacs/org/school_template.org")
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
   :unnarrowed t)
#+end_src
*** End of Org Roam Capture Templates
#+begin_src emacs-lisp
  ))
#+end_src

** Org Roam Bindings
#+begin_src emacs-lisp
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-node-insert-immediate)

         :map org-mode-map
         ("C-M-i" . completion-at-point))
  :config
  (org-roam-setup)
  #+end_src

*** Insert Node Immediately
 * This will allow you to quickly create new notes for topics you’re mentioning while writing so that you can go back later and fill those notes in with more details!
#+begin_src emacs-lisp
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (push arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src

** End of Org Roam Block
  #+begin_src emacs-lisp
  )
#+end_src 

* Latex
** Latex
#+begin_src emacs-lisp
  (use-package latex ;; This is a weird one. Package is auctex but needs to be managed like this.
    :ensure nil
    :defer t
    :init
    (setq TeX-parse-self t ; parse on load
          TeX-auto-save t  ; parse on save
          ;; Use directories in a hidden away folder for AUCTeX files.
          TeX-auto-local (concat user-emacs-directory "auctex/auto/")
          TeX-style-local (concat user-emacs-directory "auctex/style/")

          TeX-source-correlate-mode t
          TeX-source-correlate-method 'synctex

          TeX-show-compilation nil

          ;; Don't start the Emacs server when correlating sources.
          TeX-source-correlate-start-server nil

          ;; Automatically insert braces after sub/superscript in `LaTeX-math-mode'.
          TeX-electric-sub-and-superscript t
          ;; Just save, don't ask before each compilation.
          TeX-save-query nil)

    :general
    (general-define-key
     :prefix ","
     :states 'normal
     :keymaps 'LaTeX-mode-map
     "" nil
     "a" '(TeX-command-run-all :which-key "TeX run all")
     "c" '(TeX-command-master :which-key "TeX-command-master")
     "e" '(LaTeX-environment :which-key "Insert environment")
     "s" '(LaTeX-section :which-key "Insert section")
     "m" '(TeX-insert-macro :which-key "Insert macro")
     )

    )

  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer) ;; Standard way
  (setq org-latex-listings 't) ;; Enable using listings for code highlighting in export

#+end_src

** Evil Latex!!
#+begin_src emacs-lisp
  (use-package evil-tex)
  (add-hook 'LaTeX-mode-hook #'evil-tex-mode)
#+end_src

** PDF Preview (pdf-tools)
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :pin manual
    :mode  ("\\.pdf\\'" . pdf-view-mode)
    :init
    (evil-set-initial-state 'pdf-view-mode 'normal)
    :config
    (pdf-loader-install)
    (setq-default pdf-view-display-size 'fit-height)
    (setq pdf-view-continuous t) ;; Makes it so scrolling down to the bottom/top of a page switches to the next page
    (setq pdf-view-midnight-colors '("#ffffff" . "#121212" )) ;; I use midnight mode as dark mode, dark mode doesn't seem to work
    :general
    (general-define-key :states 'motion :keymaps 'pdf-view-mode-map
                        "H" 'pdf-view-fit-height-to-window
                        "0" 'pdf-view-fit-height-to-window
                        "W" 'pdf-view-fit-width-to-window
                        "C-s" 'isearch-forward
                        )
    )
#+end_src

** Use pdf-tools for Latex preview
#+begin_src emacs-lisp
;; Use pdf-tools to open PDF files
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-source-correlate-start-server t)

;; Update PDF buffers after successful LaTeX runs
(add-hook 'TeX-after-compilation-finished-functions
           #'TeX-revert-document-buffer)
#+end_src

** Plain Latex file
 * This will give us a class that won’t include all the default packages in the generated LaTeX file. Put this in your init file. You can then use it with #+LATEX_CLASS: org-plain-latex.
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("org-plain-latex"
               "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

* Development
** Rainbow delimeters
 * See the nested parentheses (God send) but only in programming-mode
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
 #+end_src

** Magit
 * Magit integration (git integration for emacs)
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* You have now reached the end of the configuration.
 * Do you cringe or are you enlightened? Have a great day either way :)
#+begin_src 
  _________________________________________
 / Invent and fit; have fits and reinvent! \
 | We toast the Lisp programmer who pens   |
 | his thoughts within nests of            |
 \\ parentheses.                           /
   ---------------------------------------
          \   ^__^ 
           \  (oo)\_______
              (__)\       )\/\\
                  ||----w |
                  ||     ||
#+end_src
