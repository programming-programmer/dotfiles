#+TITLE: Previous Configuration
#+STARTUP: content

* Preface
 * For the browser: Nyxt, qutebrowser, or Librewolf.
   * I like the idea of nyxt but it is too unstable
   * Qutebrowser is more stable so I might try it out
   * Librewolf will be main bae for a while. I'll try to not use firefox since I
     prefer the librewolf logo more lol
 * Install Noto Color Emoji (or another emoji font) and install source code pro
   font
 * For installing arch linux (ðŸ¤“), check if a) you're connected to internet, b)
   pacman-keyring is initialized and populated
* Alacritty
 * Terminal emulator
 * It's really pretty
 * Might move to st on full linux config
 * Requires cargo (rust package manager to install)
 * No image previews tho :(
 * Make sure SourceCodePro is installed
 * .desktop file
   #+begin_src sh
     [Desktop Entry]
     Name=Alacritty
     GenericName=Terminal Emulator
     Exec=/home/mthich/.cargo/bin/alacritty
     Type=Application
     Terminal=false
   #+end_src
 * Once cargo is installed:
     #+begin_src sh
    cargo install alacritty
     #+end_src

* Bash
 * In order to source bash at .config location, you have to add this to /
   etc/bash.bashrc:

   #+begin_src sh
     if [-s "${XDG_CONFIG_HOME:-$HOME/.config}/bash/bashrc" ]; then
         . "${XDG_CONFIG_HOME:=$HOME/.config/}/bash/bashrc"
     fi
   #+end_src

   * Minimal prompt no need for starship

   * aliasrc has all the aliases
   * profile has environment variables (stuff to add to $PATH and default editor)
     * This has to be linked to the .profile in the home directory in order for it to actually be sourced

* lf
 * Download go file
   * Remove any previous Go installation by deleting the /usr/local/go folder (if it exists), then extract the archive you just downloaded into /usr/local, creating a fresh Go tree in /usr/local/go:
      #+begin_src sh
      sudo rm -rf /usr/local/go && tar -C /usr/local -xzf go1.14.3.linux-amd64.tar.gz
      #+end_src

   * Add /usr/local/go/bin to the PATH environment variable.

      #+begin_src sh
      export PATH=$PATH:/usr/local/go/bin
      #+end_src

   * Verify that you've installed Go by opening a command prompt and typing the following command:
      #+begin_src sh
       go version
      #+end_src

 * install lf from go
     #+begin_src sh
    env CGO_ENABLED=0 go install -ldflags="-s -w" github.com/gokcehan/lf@latest
     #+end_src

       
* Latex
** Installation: TL;DR Unix(ish)
#+begin_src sh
cd /tmp # working directory of your choice
wget https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz # or curl instead of wget
zcat < install-tl-unx.tar.gz | tar xf -
cd install-tl-*
perl ./install-tl --no-interaction --scheme=small --no-doc-install --no-src-install # as root or with writable destination
#+end_src

 * Finally, prepend /usr/local/texlive/YYYY/bin/PLATFORM to your PATH,
#+begin_src sh
e.g., /usr/local/texlive/2023/bin/x86_64-linux
#+end_src

 * Changing defaults:
   * The default paper size is a4. If you want the default to be letter, add --paper=letter to the install-tl command.
   * By default, everything is installed (7+GB).
   * To install a smaller scheme, pass --scheme=scheme to install-tl. For example, --scheme=small corresponds to the BasicTeX variant of MacTeX.
   * To omit installation of the documentation resp. source files, pass --no-doc-install --no-src-install to install-tl.
   * To change the main installation directories (rarely needed), add --texdir=/install/dir to the install-tl command. To change the location of the per-user directories (where TEXMFHOME and others will be found), specify --texuserdir=/your/dir.
   * To change anything and everything else, omit the --no-interaction. Then you
     are dropped into an interactive installation menu.
** Install edpinfo server (for pdftools)
#+begin_src sh
git clone https://github.com/vedang/pdf-tools
cd /path/to/pdf-tools
make -s # If you don't have make installed, run ./server/autobuild and it will install make
#+end_src

 * Achuatly, install via melpa
* nvim
 * Install packer from the website before because it needs it
 * write and source init.lua first then install packers stuff
 * For pyright and clangd (python and c++ respectively) install npm and node
   (I'm not a fulltime c++ coder so no biggie)

* Emacs
 * Make sure init.el's path to config.org is installed
 * use-package making sure is installed doesn't work either so install before

 * If there is an error with org, start emacs with "emacs -q" and install org
   9.x. Then reload emacs

 * To run emacs as daemon, it needs to run with either systemd or an init
   script. OR OR OR!!!... you can add "emacs --daemon" to login when on full linux. Because systemd is unusable on chrombook and not first priority, I
   added the init script:

   #+begin_src sh
     #! /bin/sh
### BEGIN INIT INFO
# Provides:          emacs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Description:       This file should be placed in /etc/init.d.
### END INIT INFO

#change this
#USERNAME=YourUserName
USERNAME=`id 1000 -un`
eval USERHOME=~$USERNAME
DESC="Run the emacs daemon."
NAME=emacs
#change this
#DAEMON=/opt/emacs23/bin/$NAME
DAEMON=`which emacs`
DAEMON_ARGS="--daemon"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
#change this
#EMACSCLIENT=/opt/emacs23/bin/emacsclient
EMACSCLIENT=`which emacsclient`

EVALEXIT="(progn (kill-emacs))"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon -c $USERNAME -d $USERHOME --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon -c $USERNAME -d $USERHOME --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
        $EMACSCLIENT --eval "$EVALEXIT" 
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
   #+end_src


 * The Emacs (Client) .desktop file
   #+begin_src sh
[Desktop Entry]
Name=Emacs (Client)
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient -c -a "emacs" %F
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;Utility;
StartupWMClass=Emacs
   #+end_src
   
* mpv
 * Install mpv

* Tmux
 * Install tmux
   #+begin_src sh
tmux source /path/to/tmux/config
   #+end_src
 * Suffer from success
   
* Zathura
 * Install zathura
 * Not much besides that

   
* Languages
** Rust
 * Install via rustup (requires curl)

   #+begin_src sh
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
   #+end_src

** Java
 * Download JDK from reputable source
 * untar/unzip in some direcotry (ex. /usr or /opt)
 * Add to path (should already be in /bash/profile)

** Python
 * Install python3 from package manager

** C/C++
 * Install npm for nvim stuff
 * Comes by default
 * I may be forgetting something... nope. Oh wait! you gotta find out how to install npm urself lol >.<
